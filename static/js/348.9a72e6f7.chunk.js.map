{"version":3,"file":"static/js/348.9a72e6f7.chunk.js","mappings":"qJACA,SAAgB,MAAQ,wBCAxB,EAAuB,oB,aCMvB,MAgBA,EAhBkCA,IAItBC,EAAAA,EAAAA,MAAA,OAAKC,UAAYC,EAAOC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,6GACPN,EAAMO,SACRN,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACAC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,SAAW,IAAEJ,EAAMQ,iB,kCC4BvC,IAeIC,GAAmBC,EAAAA,EAAAA,GAAqC,CACxDC,KAAM,qBADaD,EAfoDV,IAEnEK,EAAAA,EAAAA,KAAA,QAAMO,SAAUZ,EAAMa,aAAaT,UAC/BH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAAD,UACKU,EAAAA,EAAAA,IAAuC,YAAa,qBAAsB,CAACC,EAAAA,GAAWC,EAAAA,OAE3FX,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,sBAW5B,QAvC2DJ,IACvD,IAAIiB,EAAe,IAAIjB,EAAMkB,UAAUC,UAAUC,KAAIC,IACjDhB,EAAAA,EAAAA,KAACiB,EAAI,CAAYf,QAASc,EAAEE,KAAMf,WAAYa,EAAEG,YAArCH,EAAEI,MAOjB,OACIxB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEuB,UAAUtB,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACI,EAAgB,CAACG,SAPTe,IACb3B,EAAM4B,QAAQD,EAAME,mBAAmB,KAOnCxB,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAE2B,MAAM1B,SACnBa,MAEH,E,cCtBd,MAYA,GALyBc,EAAAA,EAAAA,KAPAC,IACd,CACHd,SAAUc,EAAMC,YAAYf,YAOhC,CAAEU,QAASM,EAAAA,GAAQC,sBAFEJ,CAGvBK,GC1BF,GAAgB,iBAAmB,sCAAsC,UAAY,gC,aCMrF,MAuCA,EAvCoDpC,IAC5C,IAAKqC,EAAUC,IAAcC,EAAAA,EAAAA,WAAS,IACjCC,EAAQC,IAAYF,EAAAA,EAAAA,UAASvC,EAAMwC,SAExCE,EAAAA,EAAAA,YAAU,KACND,EAAUzC,EAAMwC,OAAO,GACzB,CAACxC,EAAMwC,SAeT,OACIvC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACMiC,IACEpC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAAYC,EAAAA,EAAAA,KAAA,QAAMsC,cAjBdC,KACnBN,GAAY,EAAK,EAgBgDlC,SAAEJ,EAAMwC,QAAU,aAG9EH,IACGhC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,SAAOwC,SAdDC,IAClBL,EAAUK,EAAEC,cAAcpB,MAAM,EAaaqB,WAAW,EAAMC,OAlBzCC,KACrBZ,GAAY,GACZtC,EAAMmD,aAAaX,EAAO,EAgBgEb,MAAOa,QAG3F,E,wBC5BlB,MAiCA,GALiC9B,EAAAA,EAAAA,GAAkC,CACjEC,KAAM,eACNyC,oBAAoB,GAFW1C,EA5BuD2C,IAAuC,IAAtC,aAAExC,EAAY,QAAEyC,EAAO,MAAEC,GAAOF,EACvH,OACEpD,EAAAA,EAAAA,MAAA,QAAMW,SAAUC,EAAaT,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAAD,UAAKC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,6DACZmD,IAASlD,EAAAA,EAAAA,KAAA,OAAKH,UAAWsD,EAAAA,EAAMC,iBAAiBrD,SAAEmD,KACnDtD,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4DAAc,MAAGU,EAAAA,EAAAA,IAA6B,0DAAc,WAAY,GAAI4C,EAAAA,QAEjFzD,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kEAAe,MAAGU,EAAAA,EAAAA,IAA6B,GAAI,iBAAkB,GAAI4C,EAAAA,GAAO,CAAEC,KAAM,iBAE7F1D,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6JAA+B,MAAGU,EAAAA,EAAAA,IAA6B,2JAA+B,4BAA6B,GAAIE,EAAAA,QAEpIf,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0CAAW,MAAGU,EAAAA,EAAAA,IAA6B,wCAAW,UAAW,GAAIE,EAAAA,QAE1Ef,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qDAAY,KAAGwD,OAAOC,KAAKP,EAAQQ,UAAU1C,KAAI2C,IAClD1D,EAAAA,EAAAA,KAAA,OAAeH,UAAWC,EAAE6D,QAAQ5D,UAClCH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAI2D,EAAI,MAAGjD,EAAAA,EAAAA,IAAYiD,EAAK,YAAYA,IAAO,GAAIL,EAAAA,QAD3CK,UAKT,IC0BLE,EAA8CC,IAA0C,IAAzC,QAAEZ,EAAO,QAAEa,EAAO,aAAEC,GAAeF,EACtF,OAAOjE,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CACJ+D,IAAW9D,EAAAA,EAAAA,KAAA,OAAAD,UAAKC,EAAAA,EAAAA,KAAA,UAAQgE,QAASD,EAAahE,SAAC,YAChDH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAAa,IAAEkD,EAAQgB,aAE5BrE,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBAAqB,KAAGkD,EAAQiB,eAAiB,MAAQ,QAE7DjB,EAAQiB,iBACPtE,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BAA0B,IAAEkD,EAAQkB,8BAI3CvE,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,IAAEkD,EAAQmB,YAE3BxE,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,IAAEwD,OACdC,KAAKP,EAAQQ,UACb1C,KAAK2C,IACG1D,EAAAA,EAAAA,KAACqE,EAAO,CAAWC,aAAcZ,EAAKa,aAActB,EAAQQ,SAASC,IAAvDA,UAGvB,EAOFW,EAAsCG,IAAqC,IAApC,aAAEF,EAAY,aAAEC,GAAcC,EACzE,OAAO5E,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAIuE,IAAiB,KAAGC,IAAmB,EAGzD,EAhFyCvB,IAAyE,IAADyB,EAAA,IAAvE,QAAEX,EAAO,QAAEb,EAAO,OAAEd,EAAM,aAAEW,EAAY,UAAE4B,EAAS,YAAEC,GAAa3B,GACrGhB,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GACvC,IAAKe,EACH,OAAOjD,EAAAA,EAAAA,KAAC4E,EAAAA,EAAS,IAoBnB,OACE5E,EAAAA,EAAAA,KAAA,OAAAD,UACEH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAE+E,iBAAiB9E,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKC,KAAmB,QAAdwE,EAAAxB,EAAQ6B,cAAM,IAAAL,OAAA,EAAdA,EAAgBM,QAASC,EAAWnF,UAAWC,EAAEmF,YAExDnB,IAAW9D,EAAAA,EAAAA,KAAA,SAAOsD,KAAK,OAAOd,SAtBRC,IAC3B,GAAIA,EAAEyC,OAAOC,OAAS1C,EAAEyC,OAAOC,MAAMC,OAAQ,CAC3C,MAAMC,EAAO5C,EAAEyC,OAAOC,MAAM,GACxBE,EAAK/B,KAAKgC,WAAW,UACvBZ,EAAUW,EAEd,KAiBKrD,GACGhC,EAAAA,EAAAA,KAACuF,EAAe,CAACC,cAAevC,EAASA,QAASA,EAAS1C,SAbnDkF,IAChBd,EAAYc,GAAUC,MAAK,KACzBzD,GAAY,EAAM,GAClB,KAWMjC,EAAAA,EAAAA,KAAC4D,EAAW,CAACG,aAAcA,KAAQ9B,GAAY,EAAK,EAAKgB,QAASA,EAASa,QAASA,KAExF9D,EAAAA,EAAAA,KAAC2F,EAAsB,CAACxD,OAAQA,EAAQW,aAAcA,QAEpD,ECvBV,EAhBsCnD,IAElCC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAC4F,EAAW,CAAClB,UAAW/E,EAAM+E,UACjBZ,QAASnE,EAAMmE,QACfb,QAAStD,EAAMsD,QACfd,OAAQxC,EAAMwC,OACdwC,YAAahF,EAAMgF,YACnB7B,aAAcnD,EAAMmD,gBAGjC9C,EAAAA,EAAAA,KAAC6F,EAAgB,O,kCCEvB,MAAMC,UAAyBC,EAAAA,UAE7BC,cAAAA,GACE,IAAIC,EAAcC,KAAKvG,MAAMsG,OAO7B,GANKA,IACHA,EAASC,KAAKvG,MAAMwG,iBACfF,GACHC,KAAKvG,MAAMyG,QAAQC,KAAK,YAGxBJ,EACF,MAAM,IAAIK,MAAM,kEAElBJ,KAAKvG,MAAM4G,gBAAgBN,GAC3BC,KAAKvG,MAAM6G,UAAUP,EACpB,CACHQ,iBAAAA,GAECP,KAAKF,gBACN,CACAU,kBAAAA,CAAmBC,EAAqBC,GAEnCV,KAAKvG,MAAMsG,QAASU,EAAUV,QACjCC,KAAKF,gBACT,CAEEa,MAAAA,GACC,OACG7G,EAAAA,EAAAA,KAAC8G,EAAO,IAAKZ,KAAKvG,MAChBmE,SAAUoC,KAAKvG,MAAMsG,OACrBhD,QAASiD,KAAKvG,MAAMsD,QACpBd,OAAQ+D,KAAKvG,MAAMwC,OACnBW,aAAcoD,KAAKvG,MAAMmD,aACzB4B,UAAWwB,KAAKvG,MAAM+E,WAE5B,EAKF,MAaA,GAAeqC,EAAAA,EAAAA,KACbrF,EAAAA,EAAAA,KAduBC,IAAmB,CAC1CsB,QAAStB,EAAMC,YAAYqB,QAC3Bd,OAAQR,EAAMC,YAAYO,OAC1BgE,iBAAiBxE,EAAMqF,KAAKf,OAC5BgB,OAAOtF,EAAMqF,KAAKC,UAUO,CAAEV,gBAAe,KAAEC,UAAS,KAAE1D,aAAY,KAAE4B,UAAS,KAAEC,YAAW,OAC3FuC,EAAAA,EAFF,EALoCvH,IAClC,MAAM,OAAEsG,IAAWkB,EAAAA,EAAAA,KACnB,OAAOnH,EAAAA,EAAAA,KAAC8F,EAAgB,IAAKnG,EAAOsG,OAAQA,GAAU,G,2ECxExD,MAAMmB,EAA8BzF,IAAkB,CAClDsF,OAAQtF,EAAMqF,KAAKC,SAOhB,SAASC,EAA4DG,GAUxE,OAFkC3F,EAAAA,EAAAA,IAA4D0F,EAA4B,CAAC,EAAzF1F,EANqC/B,IACnE,IAAI,OAACsH,KAAWK,GAAW3H,EAC3B,OAAKsH,GACEjH,EAAAA,EAAAA,KAACqH,EAAgB,IAAKC,KADTtH,EAAAA,EAAAA,KAACuH,EAAAA,GAAQ,CAACC,GAAG,UACe,GAMxD,C","sources":["webpack://my-app/./src/components/Profile/My posts/Myposts.module.css?945c","webpack://my-app/./src/components/Profile/My posts/Post/Posts.module.css?d9d3","components/Profile/My posts/Post/Posts.tsx","components/Profile/My posts/Myposts.tsx","components/Profile/My posts/MypostsContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHocks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Myposts_posts__xztYx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Posts_item__I-50n\"};","import React from 'react';\r\nimport s from'./Posts.module.css';\r\n\r\ntype PropsType={\r\n  message:string\r\n  LikesCount:number\r\n}\r\nconst Post: React.FC<PropsType>= (props) => {\r\n    return (\r\n      \r\n        \r\n            <div className ={s.item}>\r\n              <img src='https://avatars.mds.yandex.net/i?id=52240bacda679e53d72a7c9501b781dae3626eab-13079178-images-thumbs&n=13'/>\r\n               {props.message}\r\n              <div>\r\n              <span>Like</span> {props.LikesCount}\r\n              </div>\r\n            </div>\r\n            \r\n     \r\n    );\r\n}  \r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './Myposts.module.css';\r\nimport Post from './Post/Posts.tsx';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { required } from '../../../utils/validators/validators.ts';\r\nimport { createField, GetStringKeys, Textarea } from '../../common/FormsControl/FormsControl.tsx';\r\nimport { PostType } from '../../../types/types.ts';\r\n\r\n\r\nexport type MapPropType = {\r\n    postData: Array<PostType>\r\n    addPost: (textMessageProfile: string) => void\r\n}\r\nexport type DispatchPropType = {\r\n    postData: Array<PostType>\r\n    addPost: (textMessageProfile: string) => void\r\n}\r\nexport type AddPostFormValuesType = {\r\n    textMessageProfile: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\n\r\nconst MyPosts: React.FC<MapPropType & DispatchPropType> = (props) => {\r\n    let postsElement = [...props.postData].reverse().map(p => (\r\n        <Post key={p.id} message={p.text} LikesCount={p.likesCount} />\r\n    ));\r\n\r\n    let onAddPost = (value: AddPostFormValuesType) => {\r\n        props.addPost(value.textMessageProfile);\r\n    }\r\n\r\n    return (\r\n        <div className={s.PostBlock}>\r\n            <h2>My posts</h2>\r\n            <AddPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, {}>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    {createField<AddPostFormValuesTypeKeys>(\"Your post\", \"textMessageProfile\", [required], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nlet AddPostReduxForm = reduxForm<AddPostFormValuesType, {}>({\r\n    form: \"MyPostAddPostForm\"\r\n})(AddPostForm);\r\n\r\nexport default MyPosts;\r\n","// MyPostsContainer.tsx\r\nimport React from 'react';\r\nimport { actions } from '../../../Redux/profile-reducer.ts';\r\nimport MyPosts from \"./Myposts.tsx\";\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../../Redux/redux-store.ts';\r\nimport { PostType } from '../../../types/types.ts';\r\n\r\ntype MapPropType = {\r\n    postData: PostType[];\r\n}\r\n\r\ntype DispatchPropType = {\r\n    addPost: (textMessageProfile: string) => void;\r\n}\r\n\r\n// Обновленный mapStateToProps с явным указанием типа\r\nconst mapStateToProps = (state: AppStateType): MapPropType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    };\r\n}\r\n\r\n// Объедините MapPropType и DispatchPropType\r\nconst MyPostsContainer = connect<MapPropType, DispatchPropType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    { addPost: actions.addPostActionCreater }\r\n)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionblock\":\"ProfileInfo_descriptionblock__TATgx\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Dqjc4\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType={\r\n    status:string\r\n    updateStatus:(status:string)=>void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> =(props)=> {\r\n        let [editMode, setEditMode] =useState(false);\r\n        let [status, setStatus] =useState(props.status);\r\n        \r\n        useEffect(()=>{\r\n            setStatus(props.status);\r\n        },[props.status]);\r\n\r\n        const activateEditMode=()=>{\r\n            setEditMode(true);\r\n\r\n        }\r\n        const deactivateEditMode=()=>{\r\n            setEditMode(false);\r\n            props.updateStatus(status);\r\n        }\r\n        const onStatusChange=(e: ChangeEvent<HTMLInputElement>)=>{\r\n            setStatus(e.currentTarget.value)\r\n            \r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                    <div>\r\n                        <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport { createField, GetStringKeys, Input, Textarea } from \"../../common/FormsControl/FormsControl.tsx\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport style from \"../../common/FormsControl/FormsControl.module.css\";\r\nimport { ProfileType } from \"../../../types/types.ts\";\r\n\r\ntype PropsType={\r\n  profile: ProfileType\r\n}\r\ntype ProfileTypeKeys=GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType>& PropsType> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div><button>Сохранить</button></div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Полное имя</b>: {createField<ProfileTypeKeys>(\"Полное имя\", \"fullName\", [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Ищет работу</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n      </div>\r\n      <div>\r\n        <b>Мои профессиональные навыки</b>: {createField<ProfileTypeKeys>(\"Мои профессиональные навыки\", \"lookingForAJobDescription\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Обо мне</b>: {createField<ProfileTypeKeys>(\"Обо мне\", \"aboutMe\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Контакты</b>: {Object.keys(profile.contacts).map(key => (\r\n          <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, `contacts.${key}`, [], Input)}</b>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ \r\n  form: 'edit-profile', \r\n  enableReinitialize: true\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader.tsx';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHocks.tsx';\r\nimport userPhoto from \"../../../assed/imguser.webp\"\r\nimport ProfileDataForm from './ProfileDataForm.tsx';\r\nimport { ContactType, ProfileType } from '../../../types/types.ts';\r\n\r\ntype PropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType |null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst Profileinfo: React.FC<PropsType> = ({ isOwner, profile, status, updateStatus, savePhoto, saveProfile }) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      const file = e.target.files[0];\r\n      if (file.type.startsWith('image')) {\r\n        savePhoto(file);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionblock}>\r\n      <img src={profile.photos?.large || userPhoto} className={s.mainPhoto} />\r\n\r\n        {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        {editMode\r\n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          : <ProfileData goToEditMode={() => { setEditMode(true); }} profile={profile} isOwner={isOwner} />}\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode, }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>:{profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills</b>:{profile.lookingForAJobDescription}\r\n      </div>\r\n\r\n    }\r\n    <div>\r\n      <b>About me</b>:{profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>:{Object\r\n        .keys(profile.contacts)\r\n        .map((key) => {\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactType]} />\r\n        })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\ntype ContactsPropsType={\r\n  contactTitle: string \r\n  contactValue: string\r\n}\r\nconst Contact:React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default Profileinfo;","import React from 'react';\r\nimport MyPostsContainer from './My posts/MypostsContainer.tsx';\r\nimport Profileinfo from './ProfileInfo/ProfileInfo.tsx';\r\nimport { ProfileType } from '../../types/types.ts';\r\n\r\ntype PropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType |null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <Profileinfo savePhoto={props.savePhoto} \r\n                   isOwner={props.isOwner} \r\n                   profile={props.profile} \r\n                   status={props.status}\r\n                   saveProfile={props.saveProfile} \r\n                   updateStatus={props.updateStatus}\r\n                   />\r\n                   {/* error={props.error} */}\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile.tsx';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus } from '../../Redux/profile-reducer.ts';\r\nimport { useParams } from 'react-router-dom';\r\nimport { withAuthNavigate } from '../../hoc/withAuthNavigate.tsx';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../Redux/redux-store.ts';\r\nimport { ProfileType } from '../../types/types.ts';\r\n\r\ntype MapPropsType=ReturnType<typeof mapStateToProps> \r\ntype DispatchPropsType={\r\n  getUsersProfile:(userId:number)=>void\r\n  getStatus:(userId:number)=>void\r\n  updateStatus:(status:string)=>void\r\n  savePhoto:(file: File)=>void \r\n  saveProfile:(profile:ProfileType)=>Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & {\r\n  userId?: string; // Теперь userId может быть не определен\r\n  history?: any; // Добавляем history, если нужно\r\n};\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n \r\n  refreshProfile(){\r\n    let userId:any  = this.props.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId){\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }\r\n    if(!userId){\r\n      throw new Error(\"ID should exists in URI params or in state('authorizedUserId')\")\r\n    }else{\r\n    this.props.getUsersProfile(userId );\r\n    this.props.getStatus(userId);\r\n    }}\r\n  componentDidMount() {\r\n    \r\n   this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps:PropsType, prevState:PropsType) {\r\n    \r\n    if(this.props.userId!= prevProps.userId)  \r\n    this.refreshProfile();\r\n}\r\n\r\n  render() {\r\n   return (\r\n      <Profile {...this.props} \r\n        isOwner={!this.props.userId}\r\n        profile={this.props.profile} \r\n        status={this.props.status} \r\n        updateStatus={this.props.updateStatus} \r\n        savePhoto={this.props.savePhoto}/>\r\n    );\r\n  }\r\n}\r\n\r\n//let AuthNavigateComponent=withAuthNavigate(ProfileContainer)\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId:state.auth.userId,\r\n  isAuth:state.auth.isAuth,\r\n  //error: state.form['edit-profile']?.syncErrors\r\n});\r\n\r\nconst ProfileContainerWithParams = (props:PropsType) => {\r\n  const { userId } = useParams<PathParamsType>();\r\n  return <ProfileContainer {...props} userId={userId} />;\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile}), // Подключаем Redux\r\n  withAuthNavigate // Добавляем HOC для проверки авторизации\r\n)(ProfileContainerWithParams); // Экспортируем итоговый компонент","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\n\r\nconst mapStateToPropsForNavigate = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType={\r\n    isAuth:boolean\r\n}\r\ntype DispatchPropsType={}\r\nexport function withAuthNavigate<WCP extends React.JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>){\r\n\r\n    const NavigateComponent:React.FC< DispatchPropsType & MapPropsType > =(props)=>{\r\n        let {isAuth, ...restProps}=props\r\n        if (!isAuth) return <Navigate to='/Login'/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    \r\n    let  ConnectAuthNavigateComponent=connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForNavigate, {})(NavigateComponent);\r\n      \r\n    return ConnectAuthNavigateComponent;\r\n}"],"names":["props","_jsxs","className","s","children","_jsx","src","message","LikesCount","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","postsElement","postData","reverse","map","p","Post","text","likesCount","id","PostBlock","value","addPost","textMessageProfile","posts","connect","state","profilePage","actions","addPostActionCreater","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","onDoubleClick","activateEditMode","onChange","e","currentTarget","autoFocus","onBlur","deactivateEditMode","updateStatus","enableReinitialize","_ref","profile","error","style","formSummaryError","Input","type","Object","keys","contacts","key","contact","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","_profile$photos","savePhoto","saveProfile","Preloader","descriptionblock","photos","large","userPhoto","mainPhoto","target","files","length","file","startsWith","ProfileDataForm","initialValues","formData","then","ProfileStatusWithHooks","Profileinfo","MyPostsContainer","ProfileContainer","React","refreshProfile","userId","this","authorizedUserId","history","push","Error","getUsersProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","compose","auth","isAuth","withAuthNavigate","useParams","mapStateToPropsForNavigate","WrappedComponent","restProps","Navigate","to"],"sourceRoot":""}