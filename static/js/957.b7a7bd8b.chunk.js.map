{"version":3,"file":"static/js/957.b7a7bd8b.chunk.js","mappings":"wKAcA,MASMA,EAAiBA,KACnB,MAAMC,GAAUC,EAAAA,EAAAA,MAEVC,GAAOC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,KAAKH,SAS1D,OAPAI,EAAAA,EAAAA,YAAU,KACNN,GAASO,EAAAA,EAAAA,OACF,KACHP,GAASQ,EAAAA,EAAAA,MAAwB,IAEtC,KAEIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACK,UAAXT,IAAsBU,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gDACxBF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAC,EAAAA,EAAAA,KAACC,EAAQ,KACTD,EAAAA,EAAAA,KAACE,EAAc,SAGhB,EAIDD,EAAyBE,IAAS,MAANA,EAC9B,MAAMC,GAAmBC,EAAAA,EAAAA,QAAuB,MAC1CC,GAASf,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,KAAKa,YACrDC,EAAaC,IAAiBC,EAAAA,EAAAA,WAAS,GAgB9C,OALAf,EAAAA,EAAAA,YAAU,KACY,IAADgB,EAAbH,IACqB,QAAzBG,EAAAN,EAAkBO,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAACC,SAAS,WACpD,GACF,CAACP,KACIT,EAAAA,EAAAA,MAAA,OAAKiB,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAftCC,IACjB,MAAMC,EAASD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAaJ,EAAQK,UAAWL,EAAQM,cAAc,KAEtElB,GAAeC,GAAgB,GAEhCD,GAAeC,GAAgB,EACnC,EAQ+ET,SAAA,CAC9EO,EAASoB,KAAI,CAACC,EAAGC,KAAU5B,EAAAA,EAAAA,KAAC6B,EAAO,CAAYC,QAASH,GAAfA,EAAEI,OAC5C/B,EAAAA,EAAAA,KAAA,OAAKgC,IAAK5B,MACR,EAKJyB,EAAkDI,EAAAA,MAAWC,IAAiB,IAAhB,QAAEJ,GAASI,EAE3E,OAAOrC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEHC,EAAAA,EAAAA,KAAA,OAAKmC,IAAKL,EAAQM,MAAOtB,MAAO,CAAEuB,MAAO,WAAYrC,EAAAA,EAAAA,KAAA,KAAAD,SAAI+B,EAAQQ,YACjEtC,EAAAA,EAAAA,KAAA,SACC8B,EAAQA,SACT9B,EAAAA,EAAAA,KAAA,WACD,IAKDE,EAAgCA,KAClC,MAAO4B,EAASS,IAAc9B,EAAAA,EAAAA,UAAS,IACjCrB,GAASC,EAAAA,EAAAA,MAETC,GAAOC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,KAAKH,SAS1D,OAAOO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAAEC,EAAAA,EAAAA,KAAA,OAAAD,UACLC,EAAAA,EAAAA,KAAA,YAAUwC,SAAWtB,GAAMqB,EAAWrB,EAAEE,cAAcqB,OAAQA,MAAOX,OAErE9B,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQ0C,SAAoB,UAAVpD,EAAmBqD,QAXpBC,KACjBd,IAGJ1C,GAASyD,EAAAA,EAAAA,IAAYf,IACrBS,EAAW,IAAG,EAMuDxC,SAAC,aAEvE,EAEP,EA7F2B+C,KAEhB9C,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACHC,EAAAA,EAAAA,KAACb,EAAI,K","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState} from \"react\"\r\nimport {  sendMessage, startMessagesListening, stopMessagesListening } from \"../../Redux/chat-reducer.ts\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../Redux/redux-store.ts\"\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    \r\n    return <>\r\n        <Chat />\r\n    </>\r\n}\r\n\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch =useDispatch()\r\n   \r\n    const status=useSelector((state:AppStateType)=>state.chat.status)\r\n\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening())\r\n        return ()=>{\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n    \r\n    return <>\r\n    {status === 'error' && <div>Some error occured.Please refresh the page</div>}\r\n        <>\r\n        <Messages />\r\n        <AddMessageForm  />\r\n        </>\r\n    \r\n    </>\r\n}\r\n\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n    const messagesAnchorRef= useRef<HTMLDivElement>(null);\r\n    const messages=useSelector((state:AppStateType)=>state.chat.messages)\r\n    const [isAutoScroll,setIsAutoScroll]=useState(true)\r\n    const scrollHandler=(e:React.UIEvent<HTMLDivElement, UIEvent>)=>{\r\n        const element =e.currentTarget;\r\n        if(Math.abs((element.scrollHeight-element.scrollTop)-element.clientHeight)<300)\r\n        {\r\n            !isAutoScroll&& setIsAutoScroll(true)\r\n        }else{\r\n            isAutoScroll&& setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (isAutoScroll){\r\n        messagesAnchorRef.current?.scrollIntoView({behavior:\"smooth\"})\r\n        }\r\n    },[messages])\r\n    return <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst Message:React.FC<{ message: ChatMessageType }> =  React.memo(({ message })=> {\r\n   \r\n    return <>\r\n    \r\n        <img src={message.photo} style={{ width: '30px' }} /><b>{message.userName}</b>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </>\r\n})\r\n\r\n\r\n\r\nconst AddMessageForm: React.FC<{ }> = () => {\r\n    const [message, setMessage] = useState('');\r\n    const dispatch=useDispatch()\r\n\r\n    const status=useSelector((state:AppStateType)=>state.chat.status)\r\n\r\n    const sendMessageHandler=()=>{\r\n        if(!message){\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return <><div>\r\n        <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n    </div>\r\n        <div>\r\n            <button disabled={status !=='ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </>\r\n}\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","_Fragment","children","_jsx","Messages","AddMessageForm","_ref","messagesAnchorRef","useRef","messages","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","_ref2","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessageHandler","sendMessage","ChatPage"],"sourceRoot":""}