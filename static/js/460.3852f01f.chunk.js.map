{"version":3,"file":"static/js/460.3852f01f.chunk.js","mappings":"qIACA,SAAgB,YAAc,6BAA6B,MAAQ,uBAAuB,OAAS,wBAAwB,MAAQ,uBAAuB,SAAW,2B,uBCSrK,MASA,EATyCA,IAGjCC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAOC,UACrBJ,EAAAA,EAAAA,KAACK,EAAAA,GAAO,CAACC,GAAI,UAAYP,EAAMQ,GAAGH,SAAGL,EAAMS,SCGvD,EAToCT,IAG5BC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEO,QAAQL,SAAEL,EAAMW,O,mCC2CvBC,EAAAA,EAAAA,GAAiB,IAlCpC,MA+CMC,GAAoBC,EAAAA,EAAAA,GAAoC,CAACC,KAAK,wBAA1CD,EAZsEd,IAExFC,EAAAA,EAAAA,KAAA,QAAMe,SAAUhB,EAAMiB,aAAaZ,UAC/Ba,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACIJ,EAAAA,EAAAA,KAAA,OAAAI,UACCc,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,GAAWC,EAAAA,OAE/FpB,EAAAA,EAAAA,KAAA,OAAAI,UAAKJ,EAAAA,EAAAA,KAAA,UAAAI,SAAS,kBAO9B,EAjDqCL,IAEjC,IAAIsB,EAAMtB,EAAMuB,YAEZC,EAAiBF,EAAMG,YAAYC,KAAIC,IAAK1B,EAAAA,EAAAA,KAAC2B,EAAU,CAACnB,KAAMkB,EAAElB,KAAMD,GAAImB,EAAEnB,IAASmB,EAAEnB,MACvFqB,EAAeP,EAAMQ,aAAaJ,KAAIK,IAAK9B,EAAAA,EAAAA,KAAC+B,EAAO,CAACrB,KAAMoB,EAAEpB,MAAWoB,EAAEvB,MAO7E,OACIP,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE8B,QAAQ5B,UACtBa,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAE+B,YAAY7B,SAAA,EAC1BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEgC,MAAM9B,SACvBmB,KAEDN,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAEiC,SAAS/B,SAAA,EAC3BJ,EAAAA,EAAAA,KAAA,OAAAI,SACCwB,KAED5B,EAAAA,EAAAA,KAACY,EAAmB,CAACG,SAddqB,IACfrC,EAAMsC,YAAYD,EAAOE,eAAe,WAgBlC,E,kCC7Bd,SAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KATkBnB,IACZ,CACFC,YAAaD,EAAMC,eAOE,IAAImB,EAAAA,IAC7BC,EAAAA,EAFJ,CAGEC,E,2ECdF,MAAMC,EAA8BvB,IAAkB,CAClDwB,OAAQxB,EAAMyB,KAAKD,SAOhB,SAASH,EAA4DK,GAUxE,OAFkCP,EAAAA,EAAAA,IAA4DI,EAA4B,CAAC,EAAzFJ,EANqCzC,IACnE,IAAI,OAAC8C,KAAWG,GAAWjD,EAC3B,OAAK8C,GACE7C,EAAAA,EAAAA,KAAC+C,EAAgB,IAAKC,KADThD,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAAC3C,GAAG,UACe,GAMxD,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthNavigate.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsitem\":\"Dialogs_dialogsitem__s00Ng\",\"dialo\":\"Dialogs_dialo__N9NsQ\",\"dialog\":\"Dialogs_dialog__YcLQ5\",\"activ\":\"Dialogs_activ__blXsg\",\"messages\":\"Dialogs_messages__pzgHT\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType={\r\n    name:string\r\n    id:number\r\n}\r\n\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    \r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={\"/dialog\" + props.id} >{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType={\r\n    text:string\r\n}\r\n\r\n\r\nconst Message:React.FC<PropsType> =(props)=>{\r\n    return(\r\n        \r\n        <div className={s.message}>{props.text}</div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem.tsx\";\r\nimport Message from \"./Message/Message.tsx\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, Textarea } from \"../common/FormsControl/FormsControl.tsx\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators.ts\";\r\nimport { initialStateType } from \"../../Redux/dialogs-reducer.ts\";\r\n\r\n\r\ntype PropsType={\r\n    dialogsPage: initialStateType\r\n    sendMessage:(messageText:string)=>void\r\n}\r\nexport type NewMessageFormValuesType={\r\n    newMessageBody:string\r\n    \r\n}\r\n\r\nconst Dialogs:React.FC<PropsType> = (props) => {\r\n\r\n    let state=props.dialogsPage;\r\n\r\n    let dialogsElements =state.dialogsData.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />);\r\n    let MessagesElemnt=state.MessagesData.map(m => <Message text={m.text} key={m.id}/>);\r\n  \r\n\r\n    let addNewMessage=(values:NewMessageFormValuesType)=>{\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n    \r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsitem}>\r\n                <div className={s.dialo}>\r\n                {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                <div>\r\n                {MessagesElemnt}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport type NewMessageFormValuesKeysType= Extract<keyof NewMessageFormValuesType, string>\r\ntype PropType={}\r\n\r\nconst maxLength50= maxLengthCreator(50)\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormValuesType, PropType>& PropType>=(props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required], Textarea)}\r\n                   </div>\r\n                <div><button >Send</button></div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux=reduxForm<NewMessageFormValuesType>({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs.tsx\";\r\nimport { actions} from \"../../Redux/dialogs-reducer.ts\";\r\nimport { connect } from 'react-redux';\r\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigate.tsx\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../Redux/redux-store.ts\";\r\n\r\nlet mapStateToProps =(state:AppStateType)=>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n       \r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthNavigate\r\n)(Dialogs);","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\n\r\nconst mapStateToPropsForNavigate = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType={\r\n    isAuth:boolean\r\n}\r\ntype DispatchPropsType={}\r\nexport function withAuthNavigate<WCP extends React.JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>){\r\n\r\n    const NavigateComponent:React.FC< DispatchPropsType & MapPropsType > =(props)=>{\r\n        let {isAuth, ...restProps}=props\r\n        if (!isAuth) return <Navigate to='/Login'/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    \r\n    let  ConnectAuthNavigateComponent=connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForNavigate, {})(NavigateComponent);\r\n      \r\n    return ConnectAuthNavigateComponent;\r\n}"],"names":["props","_jsx","className","s","dialog","children","NavLink","to","id","name","message","text","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","_jsxs","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogsData","map","d","DialogItem","MessagesElemnt","MessagesData","m","Message","dialogs","dialogsitem","dialo","messages","values","sendMessage","newMessageBody","compose","connect","actions","withAuthNavigate","Dialogs","mapStateToPropsForNavigate","isAuth","auth","WrappedComponent","restProps","Navigate"],"sourceRoot":""}